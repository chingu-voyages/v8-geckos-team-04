{"version":3,"sources":["components/Main.js","components/Video.js","components/Game.js","components/Score.js","components/History.js","api/Helpers.js","components/Admin.js","api/Languages.js","components/App.js","index.js"],"names":["Main","react_default","a","createElement","className","href","react_router","render","_ref","history","onClick","push","memo","_useState","useState","_useState2","Object","slicedToArray","videoSrc","setVideoSrc","_useState3","_useState4","videoTitle","setVideoTitle","_useState5","_useState6","choice1","setChoice1","_useState7","_useState8","choice2","setChoice2","_useState9","_useState10","choice3","setChoice3","_useState11","_useState12","answer","setAnswer","_useState13","_useState14","feedback","setFeedback","_useState15","_useState16","clicked","setClicked","_useGlobal","useGlobal","_useGlobal2","global","setGlobal","nextButton","handleNext","submitButton","newScore","date","Date","toLocaleDateString","time","toLocaleTimeString","score","localScores","localStorage","setItem","localStorageKey","JSON","stringify","handleSubmit","_useState17","_useState18","next","setNext","getItem","parse","local_languages","handleUserChoice","e","qNum","target","id","newgame","uniq","uniquelanguages","filter","obj","language","randomvideos","i","rand","Math","floor","random","length","chosen","url","chooseAVideo","useEffect","src","alt","width","height","title","disabled","Game","components_Video","window","location","Score","newGame","History","output","map","item","index","key","getTitleStartIndex","startindex","findindex","lastIndexOf","getLanguageFromTitleStartIndex","slice","replace","split","sortLanguages","sortby","b","Admin","languagetable","setLanguageTable","loading","setLoading","redrawAdminTable","updated_languages","lang","rel","starttime","endtime","handleSave","deleteVideo","sortTable","localLanguages","scope","integrity","crossOrigin","_callee","API_URL","VIDEO_URL","nextid","new_languages","pagetoken","response","itemslength","language_array","_i","regenerator_default","wrap","_context","prev","process","abrupt","axios","get","sent","data","nextPageToken","items","snippet","resourceId","videoId","sort","t0","console","error","stop","App","_x","_Languages","apply","this","arguments","Languages","exact","path","component","languages","react_router_dom","components_App","document","getElementById"],"mappings":"8KAmBeA,EAhBF,kBAEXC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAR,uBACJJ,EAAAC,EAAAC,cAAA,oFACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,OAAQ,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,QAAF,OACbR,EAAAC,EAAAC,cAAA,UAAQO,QAAS,WAAQD,EAAQE,KAAK,WAAtC,qCCoJOC,qBA1Jf,WAGE,IAHeC,EAOiBC,mBAJX,6CAHNC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAORK,EAPQH,EAAA,GAOEI,EAPFJ,EAAA,GAAAK,EAQqBN,mBAJV,WAJXO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAQRE,EARQD,EAAA,GAQIE,EARJF,EAAA,GAAAG,EASeV,mBAAS,UATxBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GASRE,EATQD,EAAA,GASCE,EATDF,EAAA,GAAAG,EAUed,mBAAS,WAVxBe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAURE,EAVQD,EAAA,GAUCE,EAVDF,EAAA,GAAAG,EAWelB,mBAAS,WAXxBmB,EAAAjB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GAWRE,EAXQD,EAAA,GAWCE,EAXDF,EAAA,GAAAG,EAYatB,mBAAS,WAZtBuB,EAAArB,OAAAC,EAAA,EAAAD,CAAAoB,EAAA,GAYRE,EAZQD,EAAA,GAYAE,EAZAF,EAAA,GAAAG,EAaiB1B,qBAbjB2B,EAAAzB,OAAAC,EAAA,EAAAD,CAAAwB,EAAA,GAaRE,EAbQD,EAAA,GAaEE,EAbFF,EAAA,GAAAG,EAce9B,oBAAS,GAdxB+B,EAAA7B,OAAAC,EAAA,EAAAD,CAAA4B,EAAA,GAcRE,EAdQD,EAAA,GAcCE,EAdDF,EAAA,GAAAG,EAeaC,sBAfbC,EAAAlC,OAAAC,EAAA,EAAAD,CAAAgC,EAAA,GAeRG,EAfQD,EAAA,GAeAE,EAfAF,EAAA,GAkBTG,EAAapD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAAWM,QAAS,kBAAM4C,MAA5C,QACbC,EAAetD,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,OAAQ,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,QAAF,OAC9BR,EAAAC,EAAAC,cAAA,UAAQO,QAAS,YAmGvB,WACE,IAAM8C,EAAW,CACfC,MAAM,IAAIC,MAAOC,qBACjBC,MAAM,IAAIF,MAAOG,qBACjBC,MAAOX,EAAOW,OAEhBC,EAAYpD,KAAK6C,GACjBQ,aAAaC,QAAQC,EAAiBC,KAAKC,UAAUL,IA1GxBM,GAAgB5D,EAAQE,KAAK,YAAtD,aApBS2D,EAwBSxD,qBAxBTyD,EAAAvD,OAAAC,EAAA,EAAAD,CAAAsD,EAAA,GAwBRE,EAxBQD,EAAA,GAwBFE,EAxBEF,EAAA,GA4BTL,EAAkB,sBACnBF,aAAaU,QAAQR,IACxBF,aAAaC,QAAQC,EAAiBC,KAAKC,UAH9B,KAKf,IAAML,EAAcI,KAAKQ,MAAMX,aAAaU,QAAQR,IAI9CU,EAAkBT,KAAKQ,MAAMX,aAAaU,QADf,qBA6BjC,SAASG,EAAiBC,GACxB/B,GAAW,GAGS,KAAhBI,EAAO4B,KACTN,EAAQlB,GAGRkB,EAAQpB,GAINyB,EAAEE,OAAOC,KAAO3C,GAClBK,EAAY,oBACZS,EAAU,CAACU,MAAOX,EAAOW,MAAQ,MAGjCnB,EAAY,wBAA0BL,GAY1C,SAASgB,EAAW4B,GAClBT,IACA9B,IACAI,GAAW,GAGX5B,IACAI,IACAI,IACAI,IACAI,IACAI,IAjEF,WAME,IAJA,IAAI4C,EAAO,GACPC,EAAkBR,EAAgBS,OAAO,SAAAC,GAAG,OAAKH,EAAKG,EAAIC,YAAcJ,EAAKG,EAAIC,WAAY,KAE7FC,EAAe,GACVC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIC,EAAON,EAAgBO,KAAKC,MAAMD,KAAKE,SAAWT,EAAgBU,SACtEN,EAAa7E,KAAK+E,GAIpB,IAEIK,EAASP,EAFKG,KAAKC,MAAMD,KAAKE,SAAWL,EAAaM,SAK1D3E,EAAY4E,EAAOC,KACnBzE,EAAcwE,EAAOR,UACrB5D,EAAW6D,EAAa,GAAGD,UAC3BxD,EAAWyD,EAAa,GAAGD,UAC3BpD,EAAWqD,EAAa,GAAGD,UAC3BhD,EAAUwD,EAAOR,UA6CjBU,GAIE7C,EAFE8B,EAEQ,CAACH,KAAM,GAIP,CAACA,KAAM5B,EAAO4B,KAAO,IAenC,OA3CAmB,oBAAU,WAGR,OAAO5C,EAAW,IAElB,IAuCArD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAK8E,GAAG,kBAAkBkB,IAAI,0BAA0BC,IAAI,MAE9DnG,EAAAC,EAAAC,cAAA,OAAK8E,GAAG,gBAAR,qCAGAhF,EAAAC,EAAAC,cAAA,UAAQkG,MAAM,MAAMC,OAAO,MAAMlG,UAAU,uBACzCmG,MAAOjF,EAAY6E,IAAKjF,EAAS,wCAErCjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAQ8E,GAAIvD,EAAShB,QAAS,SAACoE,GAAOD,EAAiBC,IAAK0B,SAAU1D,GAAUpB,GAC9EzB,EAAAC,EAAAC,cAAA,UAAQ8E,GAAInD,EAASpB,QAAS,SAACoE,GAAOD,EAAiBC,IAAK0B,SAAU1D,GAAUhB,GAC9E7B,EAAAC,EAAAC,cAAA,UAAQ8E,GAAI/C,EAASxB,QAAS,SAACoE,GAAOD,EAAiBC,IAAK0B,SAAU1D,GAAUZ,IAEtFjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZsC,GAEF8B,KChIQiC,MArBf,WAAgB,IAAAzD,EACGC,sBAAVE,EADOnC,OAAAC,EAAA,EAAAD,CAAAgC,EAAA,MAQd,OACE/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAR,uBACFJ,EAAAC,EAAAC,cAACuG,EAAD,MACAzG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,aACa+C,EAAO4B,KADpB,MAC4B9E,EAAAC,EAAAC,cAAA,WAD5B,UAEUgD,EAAOW,OAEjB7D,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeM,QAbvB,WAEdiG,OAAOC,SAASvG,KAAO,UAWnB,cCSOwG,MAzBf,WAAiB,IAAA7D,EACEC,sBAAVE,EADQnC,OAAAC,EAAA,EAAAD,CAAAgC,EAAA,MAGT8D,EAAU,WACdH,OAAOC,SAASvG,KAAO,SAGzB,OACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAR,uBACJJ,EAAAC,EAAAC,cAAA,2BAAmBgD,EAAOW,OAC1B7D,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,OAAQ,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,QAAF,OACZR,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAAmBM,QAAS,WAAQD,EAAQE,KAAK,cAAnE,mBAIHV,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,OAAQ,kBACbN,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeM,QAASoG,GAA1C,iBCfF5C,EAAkB,sBACnBF,aAAaU,QAAQR,IACxBF,aAAaC,QAAQC,EAAiBC,KAAKC,UAH9B,KA+BA2C,MAzBf,WACE,IACMC,EADc7C,KAAKQ,MAAMX,aAAaU,QAAQR,IACzB+C,IAAI,SAACC,EAAKC,GAAN,OAAgBlH,EAAAC,EAAAC,cAAA,MAAIiH,IAAKD,GAAOlH,EAAAC,EAAAC,cAAA,UAAK+G,EAAKzD,MAC/BxD,EAAAC,EAAAC,cAAA,UAAK+G,EAAKtD,MACV3D,EAAAC,EAAAC,cAAA,UAAK+G,EAAKpD,UAEpD,OACE7D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAR,uBACJJ,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,oBAED6G,MCtBJ,SAASK,EAAmBd,GAE/B,IAAIe,GAAc,EAEdC,EAAYhB,EAAMiB,YAAY,YAYlC,OAXmB,IAAfD,EACAD,EAAaf,EAAMiB,YAAY,YAAc,GAK1B,KADnBD,EAAYhB,EAAMiB,YAAY,cAE1BF,EAAaf,EAAMiB,YAAY,WAAa,GAI7CF,EAWJ,SAASG,EAA+BH,EAAYf,GASvD,OAPeA,EAAMmB,MAAMJ,GAGMK,QAAQ,wCAAwC,KAE1CC,MAAM,KAa1C,SAASC,EAAcC,GAQ1B,OANKA,IAEDA,EAAS,MAIN,SAAC5H,EAAG6H,GAAJ,OAAU7H,EAAE4H,KAAYC,EAAED,GAAU,EAAI5H,EAAE4H,GAAUC,EAAED,IAAW,EAAI,GC1DjE,SAASE,IAAQ,IAAAnH,EAGcC,qBAHdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGrBoH,EAHqBlH,EAAA,GAGNmH,EAHMnH,EAAA,GAAAK,EAIEN,oBAAS,GAJXO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAIrB+G,EAJqB9G,EAAA,GAIZ+G,EAJY/G,EAAA,GAUtBgH,EAAmB,SAACC,GAEtB,GAAIA,EAAmB,CAEnB,IAAIL,EAAgBK,EAAkBrB,IAAI,SAAAsB,GAAI,OAE1CtI,EAAAC,EAAAC,cAAA,MAAIiH,IAAKmB,EAAKtD,IACVhF,EAAAC,EAAAC,cAAA,UAAKoI,EAAKtD,IACVhF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,KAAMkI,EAAKvC,IAAKhB,OAAO,SAASwD,IAAI,uBAAuBD,EAAKvC,MACvE/F,EAAAC,EAAAC,cAAA,UAAKoI,EAAKhD,UACVtF,EAAAC,EAAAC,cAAA,UAAKoI,EAAKE,WACVxI,EAAAC,EAAAC,cAAA,UAAKoI,EAAKG,SACVzI,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQO,QAAS,kBAAMiI,EAAWJ,EAAKtD,MAAvC,SACJhF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQO,QAAS,kBAAMkI,EAAYL,EAAKtD,MAAxC,cAMZiD,EAAiBD,KAQnBY,EAAY,SAACf,GAEfD,EAAcC,IAIZc,EAAc,SAAC3D,GAGjB,IAGMqD,EAHkBnE,KAAKQ,MAAMX,aAAaU,QAvC5B,qBA0CsBW,OAAO,SAAAkD,GAAI,OAAIA,EAAKtD,KAAOA,IAGrEjB,aAAaC,QA7CO,mBA6CkBE,KAAKC,UAAUkE,IAGrDD,EAAiBC,IAKfK,EAAa,SAAC1D,GAGhB,IAGMqD,EAHkBnE,KAAKQ,MAAMX,aAAaU,QAxD5B,qBA2DsBW,OAAO,SAAAkD,GAAI,OAAIA,EAAKtD,KAAOA,IAGrEjB,aAAaC,QA9DO,mBA8DkBE,KAAKC,UAAUkE,IAGrDD,EAAiBC,IAoBrB,OAfApC,oBAAU,WAENkC,GAAW,GAGX,IAAMU,EAAiB3E,KAAKQ,MAAMX,aAAaU,QA3E3B,qBA8EpB2D,EAAiBS,GAEjBV,GAAW,KAOXnI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEV+H,EAAUlI,EAAAC,EAAAC,cAAA,yBAEPF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,sCACbH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAI4I,MAAM,OAAV,MACA9I,EAAAC,EAAAC,cAAA,MAAI4I,MAAM,MAAMrI,QAASmI,EAAU,aAAnC,YACA5I,EAAAC,EAAAC,cAAA,MAAI4I,MAAM,MAAMrI,QAASmI,EAAU,QAAnC,OACA5I,EAAAC,EAAAC,cAAA,MAAI4I,MAAM,MAAMrI,QAASmI,EAAU,cAAnC,cACA5I,EAAAC,EAAAC,cAAA,MAAI4I,MAAM,MAAMrI,QAASmI,EAAU,YAAnC,YACA5I,EAAAC,EAAAC,cAAA,MAAI4I,MAAM,OAAV,QACA9I,EAAAC,EAAAC,cAAA,MAAI4I,MAAM,OAAV,WAGHd,IAMbhI,EAAAC,EAAAC,cAAA,QAAMqI,IAAI,aAAanI,KAAK,2EAC5B2I,UAAU,0EAA0EC,YAAY,wGCrH7F,SAAAC,EAAyB1E,GAAzB,IAAA2E,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAzD,EAAAO,EAAAd,EAAA6B,EAAAoC,EAAAC,EAAA,OAAAC,EAAA1J,EAAA2J,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAtF,MAAA,UAIKwF,0CACVb,EAAU,iKACVC,EAAY,iCAEdC,EAAS,EAETC,EAAgB,GAVTQ,EAAAC,KAAA,EAkBiB,oBACpB/F,aAAaU,QADO,oBAlBjB,CAAAoF,EAAAtF,KAAA,gBAsBH8E,EAAgBnF,KAAKQ,MAAMX,aAAaU,QAJpB,qBAlBjBoF,EAAAG,OAAA,SAwBIX,GAxBJ,eAmCCC,EAAY,GAGZ/E,IAEA+E,EAAY,cAAgB/E,GAxC7BsF,EAAAtF,KAAA,GA2CoB0F,IAAMC,IAAIhB,EAAUI,GA3CxC,aA2CGC,EA3CHM,EAAAM,MAAA,CAAAN,EAAAtF,KAAA,SAuDC,IAPoBgF,EAASa,KAAKC,cAI9Bb,EAAcD,EAASa,KAAKE,MAAMzE,OAElCE,EAAM,GAAIO,EAAQ,GACbd,EAAI,EAAGA,EAAIgE,EAAahE,IAQ7B,GANAO,EAAMoD,EAAYI,EAASa,KAAKE,MAAM9E,GAAG+E,QAAQC,WAAWC,QAC5DnE,EAAQiD,EAASa,KAAKE,MAAM9E,GAAG+E,QAAQjE,OAKnB,KAHhBe,EAAaD,EAAmBd,IAQhC,IAHImD,EAAiBjC,EAA+BH,EAAYf,GAGvDd,EAAI,EAAGA,EAAIiE,EAAe5D,OAAQL,IAEb,KAAtBiE,EAAejE,IAEf6D,EAAc3I,KAAK,CACfsE,GAAIoE,IACJrD,MACAyC,UAAW,GACXC,QAAS,IACTnD,SAAUmE,EAAejE,KA7E9C,OAwFC6D,EAAcqB,KAAK9C,GAGnB7D,aAAaC,QAAQ,mBAAoBE,KAAKC,UAAUkF,IA3FzDQ,EAAAG,OAAA,SAqGQX,GArGR,QAAAQ,EAAAtF,KAAA,iBAAAsF,EAAAC,KAAA,GAAAD,EAAAc,GAAAd,EAAA,SA6GPe,QAAQC,MAARhB,EAAAc,IA7GO,yBAAAd,EAAAiB,SAAA7B,EAAA,yCCaf,IAqBe8B,EArBH,WAMV,ODnBa,SAAfC,GAAAC,EAAAC,MAAAC,KAAAC,WCiBEC,GAGErL,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOiL,OAAK,EAACC,KAAK,IAAIC,UAAWzL,IACjCC,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOiL,OAAK,EAACC,KAAK,QAAQC,UAAWhF,IACrCxG,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOiL,OAAK,EAACC,KAAK,SAASC,UAAW5E,IACtC5G,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOiL,OAAK,EAACC,KAAK,WAAWC,UAAW1E,IACxC9G,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOkL,KAAK,SAASC,UAAWzD,OClBxC5E,oBAAU,CACRU,MAAO,EACPiB,KAAM,EACN2G,UAAW,KAGbnL,iBAEEN,EAAAC,EAAAC,cAACwL,EAAA,EAAD,KACE1L,EAAAC,EAAAC,cAACyL,EAAD,OAGDC,SAASC,eAAe","file":"static/js/main.2c7766cf.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Route } from 'react-router-dom'\r\n\r\nconst Main = () => (\r\n\r\n  <div>\r\n    <div className='home-page'>\r\n      <h1><a href='/'>Guess The Language</a></h1>\r\n      <h3>The game is simple, watch a short video and guess the language spoken.</h3>\r\n      <Route render={({history}) => (\r\n        <button onClick={() => { history.push('/game') }}>\r\n          Start Playing\r\n        </button>\r\n      )} />\r\n    </div>\r\n  </div>\r\n\r\n)\r\n\r\nexport default Main;","import React, { useState, useEffect, memo } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { useGlobal } from 'reactn';\r\n\r\nfunction Video() {\r\n\r\n  // Variable initialVideo & initialVideoTitle for testing only, can be deleted when the function is done\r\n  const initialVideo = 'https://www.youtube.com/embed/3FGc0zaIg2k';\r\n  const initialVideoTitle = 'English';\r\n\r\n  // const [videoId, setVideoId] = useState(0);\r\n  const [videoSrc, setVideoSrc] = useState(initialVideo);\r\n  const [videoTitle, setVideoTitle] = useState(initialVideoTitle);  \r\n  const [choice1, setChoice1] = useState('French'); // initial value for testing only\r\n  const [choice2, setChoice2] = useState('English'); // initial value for testing only\r\n  const [choice3, setChoice3] = useState('Italian'); // initial value for testing only\r\n  const [answer, setAnswer] = useState('English'); // initial value for testing only\r\n  const [feedback, setFeedback] = useState();\r\n  const [clicked, setClicked] = useState(false);\r\n  const [global, setGlobal] = useGlobal();\r\n\r\n  // next and submit button\r\n  const nextButton = <button className='next-btn' onClick={() => handleNext()}>Next</button>\r\n  const submitButton = <Route render={({history}) => (\r\n        <button onClick={() => { handleSubmit(); history.push('/score') }}>\r\n          Submit\r\n        </button>\r\n      )} />\r\n  const [next, setNext] = useState(); \r\n\r\n  // get localStorage data\r\n  const scores = [];\r\n  const localStorageKey = 'usrName_localScores';\r\n  if (!localStorage.getItem(localStorageKey)) {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(scores));\r\n  }\r\n  const localScores = JSON.parse(localStorage.getItem(localStorageKey));\r\n\r\n  // The localStorage key for the languages array.\r\n  const localStorageKeyLanguages = 'stored_languages';\r\n  const local_languages = JSON.parse(localStorage.getItem(localStorageKeyLanguages));\r\n\r\n  // A function is needed to choose video src, choices and answer\r\n  function chooseAVideo() {\r\n\r\n    var uniq = {};\r\n    let uniquelanguages = local_languages.filter(obj => !uniq[obj.language] && (uniq[obj.language] = true));\r\n\r\n    let randomvideos = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      let rand = uniquelanguages[Math.floor(Math.random() * uniquelanguages.length)];\r\n      randomvideos.push(rand);\r\n    }\r\n    \r\n    // Out of the 3 videos chosen at random from the data set, select 1 random one to show and be the correct answer.\r\n    let chosenindex = Math.floor(Math.random() * randomvideos.length);\r\n\r\n    let chosen = randomvideos[chosenindex];\r\n\r\n    // setVideoId(chosen.id);\r\n    setVideoSrc(chosen.url);\r\n    setVideoTitle(chosen.language);\r\n    setChoice1(randomvideos[0].language);\r\n    setChoice2(randomvideos[1].language);\r\n    setChoice3(randomvideos[2].language);\r\n    setAnswer(chosen.language);\r\n  }\r\n\r\n  function handleUserChoice(e) {\r\n    setClicked(true);\r\n    // Show next/submit button\r\n    // Switch from next button to submit button when qNum hits 10\r\n    if (global.qNum === 10) {\r\n      setNext(submitButton)\r\n    }\r\n    else {\r\n      setNext(nextButton);\r\n    }\r\n\r\n    // Show feedback\r\n    if (e.target.id === answer) {\r\n      setFeedback('You are correct!');\r\n      setGlobal({score: global.score + 10});\r\n    }\r\n    else {\r\n      setFeedback('Oops! The answer was ' + answer);\r\n    }\r\n  }\r\n\r\n  // Use React hook to get an initial video to start the game rather than the hard-coded one.\r\n  useEffect(() => {\r\n\r\n    // pass 1 to handleNext so it knows this is a new game so the question number the user is on should say 1.\r\n    return handleNext(1); \r\n\r\n  },[]);\r\n  \r\n  function handleNext(newgame) { \r\n    setNext();\r\n    setFeedback(); // Hide feedback div\r\n    setClicked(false); // Enable choice buttons\r\n\r\n    // Reset chosen video and choices to defaults to clear.\r\n    setVideoSrc();\r\n    setVideoTitle();\r\n    setChoice1();\r\n    setChoice2();\r\n    setChoice3();\r\n    setAnswer();\r\n\r\n    chooseAVideo(); // Select the next random video.\r\n\r\n    if (newgame) { // Starting a new game so question number is 1.\r\n      \r\n      setGlobal({qNum: 1});\r\n\r\n    } else {\r\n\r\n      setGlobal({qNum: global.qNum + 1});\r\n         \r\n    }\r\n  }\r\n\r\n  function handleSubmit() {\r\n    const newScore = {\r\n      date: new Date().toLocaleDateString(),\r\n      time: new Date().toLocaleTimeString(),\r\n      score: global.score\r\n    }\r\n    localScores.push(newScore);\r\n    localStorage.setItem(localStorageKey, JSON.stringify(localScores));\r\n  }\r\n\r\n  return (\r\n    <div className=\"video\">\r\n      <div className=\"youtube-video-wrapper\">\r\n        <div className='title-blocker'>\r\n          <img id='imagehidestitle' src='./images/titlecover.jpg' alt='' />\r\n        </div>\r\n        <div id='whatlanguage'>\r\n          What language do you think it is?\r\n        </div>\r\n        <iframe width=\"560\" height=\"349\" className='youtube-video-iframe' \r\n          title={videoTitle} src={videoSrc+'?start=5&end=120&autoplay=1&mute=1'}></iframe>\r\n      </div>\r\n      <div className='choices'>\r\n        <button id={choice1} onClick={(e) => {handleUserChoice(e)}} disabled={clicked}>{choice1}</button>\r\n          <button id={choice2} onClick={(e) => {handleUserChoice(e)}} disabled={clicked}>{choice2}</button>\r\n            <button id={choice3} onClick={(e) => {handleUserChoice(e)}} disabled={clicked}>{choice3}</button>\r\n      </div>\r\n      <div className='feedback'>\r\n        {feedback}\r\n      </div>\r\n      {next}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Video);","import React from 'react';\r\nimport Video from './Video';\r\nimport { useGlobal } from 'reactn';\r\n\r\nfunction Game() {\r\n  const [global] = useGlobal();\r\n\r\n  const newGame = () => {\r\n\r\n    window.location.href = '/game'; // Start a new game.\r\n  }\r\n\r\n  return(\r\n    <div className='sidebars'>\r\n      <h1><a href='/'>Guess The Language</a></h1>\r\n        <Video />\r\n        <div className='score-box'>\r\n          Question: {global.qNum}/10<br />\r\n          Score: {global.score}\r\n        </div>\r\n        <button className='new-game-btn' onClick={newGame}>New Game</button>\r\n    </div>\r\n  )\r\n} \r\n\r\nexport default Game;","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { useGlobal } from 'reactn';\r\n\r\nfunction Score() {\r\n  const [global] = useGlobal();\r\n\r\n  const newGame = () => {\r\n    window.location.href = '/game'; // Start a new game.\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1><a href='/'>Guess The Language</a></h1>\r\n      <div>Total Score: {global.score}</div>\r\n      <Route render={({history}) => (\r\n         <button className='view-history-btn' onClick={() => { history.push('/history') }}>\r\n           View History\r\n         </button>\r\n      )} />\r\n      <Route render={() => (\r\n        <button className='new-game-btn' onClick={newGame}>\r\n          New Game\r\n        </button>\r\n      )} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Score;","import React from 'react';\r\n\r\n// Clear localStorage\r\n// localStorage.clear();\r\n// get localStorage data\r\nconst scores = []; //set initial data to an empty list\r\nconst localStorageKey = 'usrName_localScores';\r\nif (!localStorage.getItem(localStorageKey)) {\r\n  localStorage.setItem(localStorageKey, JSON.stringify(scores));\r\n}\r\n\r\nfunction History() {\r\n  const localScores = JSON.parse(localStorage.getItem(localStorageKey));\r\n  const output = localScores.map((item,index) => <tr key={index}><td>{item.date}</td>\r\n                                            <td>{item.time}</td>\r\n                                            <td>{item.score}</td></tr>);\r\n\r\n  return (\r\n    <div>\r\n      <h1><a href='/'>Guess The Language</a></h1>\r\n      <h3>Playing History</h3>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th>Date</th>\r\n            <th>Time</th>\r\n            <th>Score</th>\r\n          </tr>\r\n          {output}\r\n        </tbody>\r\n      </table> \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default History;","\r\n/**\r\n * Find the starting index of the language name from the title of a video.\r\n * @param {title} Full title of video from YouTube JSON.\r\n * @return {startindex} Starting index in title where language name begins. \r\n */\r\nexport function getTitleStartIndex(title) {\r\n\r\n    let startindex = -1;\r\n    // FIRST check the rest of the string after 'speaking ' is the language(s).\r\n    let findindex = title.lastIndexOf('peaking ');\r\n    if (findindex !== -1) {\r\n        startindex = title.lastIndexOf('peaking ') + 7;\r\n    } else {\r\n        // SECOND since speaking or Speaking is not present, check for signing or Signing:\r\n        // the rest of the string after 'signing ' is the language(s).\r\n        findindex = title.lastIndexOf('igning ');\r\n        if (findindex !== -1) {\r\n            startindex = title.lastIndexOf('igning ') + 6; \r\n        }\r\n    }\r\n\r\n    return startindex;\r\n\r\n}\r\n\r\n\r\n/**\r\n * Find the language(s) for the video from the start index of the title string.\r\n * @param {title} Full title of the video from YouTube JSON.\r\n * @param {startindex} Starting index in title where language name begins.\r\n * @return {language_array} All the languages used in this particular video. \r\n */\r\nexport function getLanguageFromTitleStartIndex(startindex, title) {\r\n\r\n    let language = title.slice(startindex);\r\n    // Check to see if \"language\" variable contains multiple languages. First delimit languages in\r\n    // the title sentence with '|' character.\r\n    let delimit_languages = language.replace(/(\\s+&\\s+|,\\s+and\\s+|\\s+and\\s+|,\\s+)/gi,'|');\r\n    // now create an array of languages from splitting them between the delimiter.\r\n    let language_array = delimit_languages.split('|');\r\n\r\n    return language_array;\r\n\r\n}\r\n\r\n\r\n/**\r\n * Sort the languages array.\r\n * @param {sortby} The property of the languages we want to sort by.\r\n * @param {a, b} Comparison parameters for each video array element.\r\n * @return {comparison} The sorted languages array. \r\n */\r\nexport function sortLanguages(sortby) {\r\n\r\n    if (!sortby) {\r\n\r\n        sortby = 'id'; // Default\r\n    \r\n    }\r\n\r\n    return (a, b) => a[sortby] === b[sortby] ? 0 : a[sortby] < b[sortby] ? -1 : 1;\r\n\r\n}\r\n  \r\n\r\n\r\n  /*\r\nexport function sortLanguages(a, b) {\r\n\r\n    // const languageA = a.language.toUpperCase();\r\n    // const languageB = b.language.toUpperCase();\r\n    const languageA = a.id;\r\n    const languageB = b.id;\r\n\r\n    let comparison = 0;\r\n\r\n    if (languageA > languageB) {\r\n\r\n        comparison = 1;\r\n\r\n    } else if (languageA < languageB) {\r\n\r\n        comparison = -1\r\n\r\n    }\r\n\r\n    return comparison;\r\n}\r\n*/\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { sortLanguages } from '../api/Helpers.js'; // Admin helper functions.\r\n\r\nexport default function Admin() {\r\n\r\n    // Use the useState hooks to manage the  state of the fetched data.\r\n    const [languagetable, setLanguageTable] = useState();\r\n    const [loading, setLoading] = useState(false); // Loading indicator.\r\n\r\n    // The localStorage key for the languages array.\r\n    const localStorageKey = 'stored_languages';\r\n\r\n    // Updates the admin table display after CRUD operations.\r\n    const redrawAdminTable = (updated_languages) => {\r\n\r\n        if (updated_languages) {\r\n    \r\n            let languagetable = updated_languages.map(lang => (\r\n                \r\n                <tr key={lang.id}>\r\n                    <td>{lang.id}</td>\r\n                    <td><a href={lang.url} target='_blank' rel='noopener noreferrer'>{lang.url}</a></td>\r\n                    <td>{lang.language}</td>\r\n                    <td>{lang.starttime}</td>\r\n                    <td>{lang.endtime}</td>\r\n                    <td><button onClick={() => handleSave(lang.id)}>Save</button></td>\r\n                    <td><button onClick={() => deleteVideo(lang.id)}>Delete</button></td>\r\n                </tr>\r\n    \r\n            ));\r\n    \r\n            // Update the language table layout.\r\n            setLanguageTable(languagetable);\r\n   \r\n        }\r\n\r\n        return;\r\n    \r\n    } \r\n\r\n    const sortTable = (sortby) => {\r\n\r\n        sortLanguages(sortby);\r\n\r\n    }\r\n\r\n    const deleteVideo = (id) => {\r\n        \r\n        // Get the current languages array from the browser's localStorage.\r\n        const local_languages = JSON.parse(localStorage.getItem(localStorageKey));\r\n\r\n        // Create a new array without the deleted language.\r\n        const updated_languages = local_languages.filter(lang => lang.id !== id);\r\n\r\n        // Update the languages array in localStorage to reflect the deletion.\r\n        localStorage.setItem(localStorageKey, JSON.stringify(updated_languages));\r\n\r\n        // Update the admin table.\r\n        redrawAdminTable(updated_languages);\r\n\r\n    }\r\n\r\n\r\n    const handleSave = (id) => {\r\n\r\n        // Get the current languages array from the browser's localStorage.\r\n        const local_languages = JSON.parse(localStorage.getItem(localStorageKey));\r\n\r\n        // Create a new array that reflects the edits made to a language.\r\n        const updated_languages = local_languages.filter(lang => lang.id !== id);\r\n\r\n        // Update the languages array in localStorage to reflect the changes to a language.\r\n        localStorage.setItem(localStorageKey, JSON.stringify(updated_languages));\r\n\r\n        // Update the admin table.\r\n        redrawAdminTable(updated_languages);\r\n\r\n    }\r\n\r\n    // Use the useEffect hook to build the admin table from the languages data.\r\n    useEffect(() => {\r\n\r\n        setLoading(true); // Show loading indicator.\r\n\r\n        // Get the languages data from the browser's localStorage.\r\n        const localLanguages = JSON.parse(localStorage.getItem(localStorageKey));\r\n\r\n        // Update the admin table.\r\n        redrawAdminTable(localLanguages);\r\n\r\n        setLoading(false); // Don't show loading indicator any more.\r\n\r\n    });\r\n\r\n    // Display the records.   \r\n    return (\r\n\r\n        <div className=\"container\">\r\n\r\n            {loading ? <div>Loading...</div> : \r\n\r\n                <table className='table table-bordered table-striped'>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th scope=\"col\">ID</th>\r\n                            <th scope=\"col\" onClick={sortTable('language')}>Language</th>\r\n                            <th scope=\"col\" onClick={sortTable('url')}>URL</th>\r\n                            <th scope=\"col\" onClick={sortTable('starttime')}>Start Time</th>\r\n                            <th scope=\"col\" onClick={sortTable('endtime')}>End Time</th>\r\n                            <th scope=\"col\">Edit</th>\r\n                            <th scope=\"col\">Delete</th>\r\n                        </tr>\r\n\r\n                        {languagetable}\r\n\r\n                    </tbody>\r\n                </table>\r\n\r\n            }\r\n            <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\r\n            integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossOrigin=\"anonymous\">\r\n            </link>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\n","import { getTitleStartIndex, getLanguageFromTitleStartIndex, sortLanguages } from './Helpers'; // Admin helper functions.\r\nimport axios from 'axios'; // Axios for talking to the YouTube API.\r\n        \r\nexport default async function Languages(next) {\r\n\r\n    // Get the YouTube API key from the .env file (environmental variables).\r\n    // NOT PRIVATE (JavaScript is client-side so don't store anything super sensitive in .env!)\r\n    const API_KEY = process.env.REACT_APP_YOUTUBE_DATA_API_V3_KEY;\r\n    const API_URL = 'https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=UUBgWgQyEb5eTzvh4lLcuipQ&key=' + API_KEY;\r\n    const VIDEO_URL = 'https://www.youtube.com/embed/';\r\n\r\n    let nextid = 1; // Simple way to get a unique id to act as the key in the list of languages.\r\n\r\n    let new_languages = []; // Create a new array instead of mutating state.\r\n\r\n    try {\r\n        \r\n        // Try to get the languages array from the client browser's localStorage first. If it is not there,\r\n        // then fetch the languages from YouTube.\r\n\r\n        // 1) Check if the stored_languages key exists in the browser's local storage. If not, add it from YouTube.\r\n        const localStorageKey = 'stored_languages';\r\n        if (localStorage.getItem(localStorageKey)) {\r\n\r\n            // Return the list of languages from the localStore.\r\n            new_languages = JSON.parse(localStorage.getItem(localStorageKey));\r\n            \r\n            return new_languages;\r\n\r\n        } else {\r\n\r\n            // Return the list of languages by getting it from YouTube's API.\r\n\r\n            // YouTube only allows 50 per API call, and we have many more than 50 videos to get, so\r\n            // we use recursion to execute Languages with the API's provided nextPageToken, until\r\n            // it returns results that do not have nextPageToken, which means we have reached the end\r\n            // of the list and have all the videos.\r\n            \r\n            let pagetoken = ''; // Default first page token code.\r\n\r\n            // if the 'next' property exists in the results, it is the code for the next starting index (next page).\r\n            if (next) {\r\n                \r\n                pagetoken = '&pageToken=' + next; // So append the pageToken (next) value onto the API_URL query.\r\n            }\r\n\r\n            const response = await axios.get(API_URL + pagetoken);\r\n\r\n            if (response) {\r\n\r\n                // Token (next page) provided by YouTube results to let us know if there are more results we can get.\r\n                let nextPagetoken = response.data.nextPageToken; \r\n\r\n                // The YouTube API returns a collection of search results (i.e. an array of objects, data.items).\r\n\r\n                let itemslength = response.data.items.length; // Number of results returned this axios call.\r\n\r\n                let url = '', title = '';\r\n                for (let i = 0; i < itemslength; i++) {\r\n\r\n                    url = VIDEO_URL + response.data.items[i].snippet.resourceId.videoId; // Get the url field for the video.\r\n                    title = response.data.items[i].snippet.title; // Get the title field of the video.\r\n\r\n                    let startindex = getTitleStartIndex(title); // Extract the language from the title.\r\n\r\n                    // Check if a language name still isn't present. If not, do not execute the below for this video.\r\n                    if (startindex !== -1) {\r\n\r\n                        let language_array = getLanguageFromTitleStartIndex(startindex, title);\r\n\r\n                        // Loop through the language array and add each one to new_languages.\r\n                        for (let i = 0; i < language_array.length; i++) {\r\n\r\n                            if (language_array[i] !== '') {\r\n\r\n                                new_languages.push({\r\n                                    id: nextid++,\r\n                                    url,\r\n                                    starttime: 10,\r\n                                    endtime: 120,\r\n                                    language: language_array[i]\r\n                                });\r\n\r\n                            }\r\n\r\n                        }\r\n                        \r\n                    }\r\n\r\n                }\r\n\r\n                new_languages.sort(sortLanguages); // Sort the languages.\r\n\r\n                // Save the languages array to the browser's localStorage.\r\n                localStorage.setItem('stored_languages', JSON.stringify(new_languages));\r\n                \r\n                if (nextPagetoken) {\r\n\r\n                    ///////////////////////////////// ATTN SABRINA - UNCOMMENT WHEN DONE TESTING:\r\n                    // There are more videos to retrieve, because API says nextPagetoken is not null, so call Languages again.\r\n                    //Languages(nextPagetoken); // enable after testing so we don't hit youtube quota too soon.\r\n                }\r\n\r\n                // Return the updated list of languages.\r\n                return new_languages;\r\n\r\n            } \r\n\r\n        }\r\n\r\n    } catch(error) {\r\n\r\n        console.error(error);\r\n\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react';\r\n\r\n// routing so we can visit an admin page or other navigation within the app.\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Main from './Main';\r\nimport Game from './Game';\r\nimport Score from './Score';\r\nimport History from './History';\r\nimport Admin from './Admin';\r\nimport Languages from '../api/Languages';\r\n\r\n// The App component renders one of the provided\r\n// Routes. If the route is '/', then we will display\r\n// the Main component (contains the video and buttons).\r\n// If the route is /admin, we will display the Admin component.\r\n\r\nconst App = () => {\r\n\r\n  // Hydrate the languages array state either from the user browser's localStorage, \r\n  // or fro YouTube API if localStorage is empty.\r\n  Languages();\r\n  \r\n  return (\r\n    <main>\r\n      <Switch>\r\n        <Route exact path='/' component={Main}/>\r\n        <Route exact path='/game' component={Game}/>\r\n        <Route exact path='/score' component={Score}/>\r\n        <Route exact path='/history' component={History}/>\r\n        <Route path='/admin' component={Admin}/>\r\n      </Switch>\r\n    </main>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\n\r\n// routing so we can visit an admin page or other navigation within the app.\r\nimport { BrowserRouter } from 'react-router-dom'; \r\n\r\nimport App from './components/App';\r\n\r\n// Add global variables\r\nimport { setGlobal } from 'reactn';\r\n\r\nsetGlobal({\r\n  score: 0,\r\n  qNum: 1, // Question number\r\n  languages: [] // Languages array from YouTube.\r\n});\r\n\r\nrender((\r\n\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>\r\n\r\n), document.getElementById('root'));"],"sourceRoot":""}